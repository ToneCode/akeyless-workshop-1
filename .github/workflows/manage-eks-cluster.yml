name: Manage EKS Cluster

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform (apply or destroy)'
        required: true
        default: 'apply'

jobs:
  manage_cluster:
    permissions: 
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch dynamic secrets from Akeyless
        id: fetch-dynamic-secrets
        uses: akeyless-community/akeyless-github-action@v1.1.1
        with:
          access-id: ${{ vars.AKEYLESS_ACCESS_ID }}
          access-type: jwt
          dynamic-secrets: |
            - name: "/Terraform/terraform-credentials"
              output-name: "aws_dynamic_secret"
        
      # ********* KEY TAKEAWAY  ********* #
      # STEP 1 - Export Dynamic Secret's keys to env vars
      - name: Export Secrets to Environment
        run: |
          echo '${{ steps.fetch-dynamic-secrets.outputs.aws_dynamic_secret }}' | jq -r 'to_entries|map("AWS_\(.key|ascii_upcase)=\(.value|tostring)")|.[]' >> $GITHUB_ENV

      # STEP 2 - You can now access each secret separately as environment variables
      - name: Verify Vars
        run: |
          echo "access_key_id: ${{ env.AWS_ACCESS_KEY_ID }}" >> secrets.txt
          echo "id: ${{ env.AWS_ID }}" >> secrets.txt
          echo "secret_access_key: ${{ env.AWS_SECRET_ACCESS_KEY }}" >> secrets.txt
          echo "security_token: ${{ env.AWS_SECURITY_TOKEN }}" >> secrets.txt
          echo "ttl_in_minutes: ${{ env.AWS_TTL_IN_MINUTES }}" >> secrets.txt
          echo "type: ${{ env.AWS_TYPE }}" >> secrets.txt
          echo "user: ${{ env.AWS_USER }}" >> secrets.txt
          cat secrets.txt

      # Setup AWS CLI
      - name: Configure AWS Credentials
        run: |
          env | grep -i aws
          aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Generate backend.hcl
        run: |
          SUFFIX=${GITHUB_ACTOR}
          echo "key = \"workshop1-${SUFFIX}/terraform.tfstate\"" > backend.hcl
          echo "Generated suffix: ${SUFFIX}"
          echo "SUFFIX=${SUFFIX}" >> $GITHUB_ENV  # Export SUFFIX to the environment

      - name: Terraform Init
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply or Destroy
        id: terraform_action
        run: |
          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            terraform apply -var="cluster_name=workshop-1-${SUFFIX}" -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            terraform destroy -var="cluster_name=workshop-1-${SUFFIX}" -auto-approve
          else
            echo "Invalid action specified: ${{ github.event.inputs.action }}"
            exit 1
          fi
